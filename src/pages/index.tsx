import { withAuthenticator } from "@aws-amplify/ui-react";
import {
  Box,
  Container,
  Flex,
  FormControl,
  Heading,
  IconButton,
  Input,
} from "@chakra-ui/react";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import { FaRegArrowAltCircleRight, FaRegTimesCircle } from "react-icons/fa";

import useRecoveryData from "../hooks/useRecoveryData";

const Home = () => {
  const {
    handleSubmit,
    getUserName,
    RootState,
    isMe,
    getMessagesState,
    stateMessages,
  } = useRecoveryData();
  RootState();
  const user = getUserName();

  const [messageText, setMessageText] = useState("");
  const { loadingSendMessage, sendMessage } = handleSubmit;

  const goToDown = () => {
    const chat = document.getElementById("chat");
    chat?.scrollTo(0, chat.scrollHeight);
  };

  useEffect(() => {
    goToDown();
  }, [getMessagesState]);

  return (
    <>
      <Head>
        <title>QuickMessage</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container
        maxW="container.xl"
        h="100vh"
        maxH={"100vh"}
        overflowY="hidden"
        display="flex"
        alignItems="center"
        bg="gray.700"
        justifyContent="center">
        <Flex direction="column" w="100%" gap={4} bg="gray.900">
          <Heading
            as="h1"
            fontSize="6xl"
            color="white"
            alignSelf={"center"}
            fontWeight="extrabold"
            letterSpacing="tight"
            lineHeight="shorter">
            QuickMessage
          </Heading>

          <Flex
            direction="column"
            w="100%"
            h="100%"
            p={8}
            mt={4}
            borderRadius="md"
            boxShadow="md">
            <Flex
              flexDirection={"column"}
              id="chat"
              maxHeight={"60vh"}
              overflowY="scroll">
              {stateMessages?.map(
                (message: { id: any; owner: string; message: any }) => {
                  return (
                    <Box
                      m={4}
                      key={message.id}
                      py={4}
                      px={8}
                      bg={isMe(message.owner) ? "teal.100" : "gray.300"}
                      borderRadius="md"
                      alignSelf={
                        isMe(message.owner) ? "flex-end" : "flex-start"
                      }>
                      <Heading
                        as="h3"
                        fontSize="md"
                        color="gray.700"
                        fontWeight="extrabold"
                        letterSpacing="tight"
                        lineHeight="shorter">
                        {message.message}
                      </Heading>
                      <Heading
                        as="h4"
                        fontSize="md"
                        color="gray.500"
                        fontWeight="extrabold"
                        letterSpacing="tight"
                        lineHeight="shorter">
                        {message.owner}
                      </Heading>
                    </Box>
                  );
                }
              )}
            </Flex>
            <FormControl
              flex="1"
              overflowY="auto"
              alignItems={"center"}
              justifyContent={"center"}
              display={"flex"}
              flexDirection={"row"}
              mt={4}
              gap={4}
              w="100%">
              <Input
                type="text"
                placeholder="Enter your message"
                value={messageText}
                onChange={(e: { target: { value: any } }) =>
                  setMessageText(e.target.value)
                }
                size="lg"
                fontWeight="normal"
                letterSpacing="wide"
                alignSelf={"center"}
                fontSize="lg"
                lineHeight="shorter"
                px={8}
                h={14}
                color="white"
                borderRadius="md"
                boxShadow="md"
              />
              <IconButton
                disabled={messageText.length === 0}
                icon={
                  messageText.length > 0 ? (
                    <FaRegArrowAltCircleRight />
                  ) : (
                    <FaRegTimesCircle />
                  )
                }
                color={messageText.length > 0 ? "teal.500" : "red.500"}
                type="submit"
                bg={messageText.length > 0 ? "teal.100" : "red.100"}
                aria-label="Send message"
                fontWeight="extrabold"
                letterSpacing="wide"
                alignSelf={"center"}
                fontSize="4xl"
                lineHeight="shorter"
                px={8}
                h={14}
                _hover={{
                  bg: messageText.length > 0 ? "teal.200" : "red.200",
                }}
                _active={{
                  bg: messageText.length > 0 ? "teal.300" : "red.300",
                }}
                borderRadius="md"
                boxShadow="md"
                onClick={() => {
                  messageText.length > 0 &&
                    sendMessage({
                      owner: user,
                      messageText,
                    });
                  setMessageText("");
                }}
                isLoading={loadingSendMessage}></IconButton>
            </FormControl>
          </Flex>
        </Flex>
      </Container>
    </>
  );
};

export default withAuthenticator(Home);
